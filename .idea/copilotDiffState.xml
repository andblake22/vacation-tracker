<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/vacationscheduler/entities/Excursion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/vacationscheduler/entities/Excursion.java" />
              <option name="originalContent" value="package com.example.vacationscheduler.entities;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.ForeignKey;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;excursions&quot;,&#10;        foreignKeys = @ForeignKey(entity = Vacation.class,&#10;                parentColumns = &quot;id&quot;,&#10;                childColumns = &quot;vacationId&quot;,&#10;                onDelete = ForeignKey.CASCADE))&#10;public class Excursion {&#10;    @PrimaryKey(autoGenerate = true)&#10;    private int id;&#10;    private int vacationId;&#10;    private String title;&#10;    private String date;&#10;&#10;    public Excursion(int vacationId, String title, String date) {&#10;        this.vacationId = vacationId;&#10;        this.title = title;&#10;        this.date = date;&#10;    }&#10;&#10;    // Getters and Setters&#10;    public int getId() { return id; }&#10;    public void setId(int id) { this.id = id; }&#10;    public int getVacationId() { return vacationId; }&#10;    public void setVacationId(int vacationId) { this.vacationId = vacationId; }&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;    public String getDate() { return date; }&#10;    public void setDate(String date) { this.date = date; }&#10;}" />
              <option name="updatedContent" value="package com.example.vacationscheduler.entities;&#10;&#10;import androidx.room.Entity;&#10;import androidx.room.ForeignKey;&#10;import androidx.room.PrimaryKey;&#10;&#10;@Entity(tableName = &quot;excursions&quot;,&#10;        foreignKeys = @ForeignKey(entity = Vacation.class,&#10;                parentColumns = &quot;id&quot;,&#10;                childColumns = &quot;vacationId&quot;,&#10;                onDelete = ForeignKey.CASCADE))&#10;public class Excursion {&#10;    @PrimaryKey(autoGenerate = true)&#10;    private int id;&#10;    private int vacationId;&#10;    private String title;&#10;    private String date;&#10;&#10;    public Excursion(int vacationId, String title, String date) {&#10;        this.vacationId = vacationId;&#10;        this.title = title;&#10;        this.date = date;&#10;    }&#10;&#10;    public int getId() { return id; }&#10;    public void setId(int id) { this.id = id; }&#10;    public int getVacationId() { return vacationId; }&#10;    public void setVacationId(int vacationId) { this.vacationId = vacationId; }&#10;    public String getTitle() { return title; }&#10;    public void setTitle(String title) { this.title = title; }&#10;    public String getDate() { return date; }&#10;    public void setDate(String date) { this.date = date; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/vacationscheduler/util/DateValidator.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/vacationscheduler/util/DateValidator.java" />
              <option name="originalContent" value="package com.example.vacationscheduler.util;&#10;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;/**&#10; * Utility class for validating vacation date inputs.&#10; */&#10;public final class DateValidator {&#10;    private static final String PATTERN = &quot;MM/dd/yyyy&quot;;&#10;&#10;    private DateValidator() {}&#10;&#10;    public static boolean isValidDate(String date) {&#10;        if (date == null || date.trim().isEmpty()) return false;&#10;        SimpleDateFormat sdf = new SimpleDateFormat(PATTERN, Locale.US);&#10;        sdf.setLenient(false);&#10;        try {&#10;            sdf.parse(date.trim());&#10;            return true;&#10;        } catch (ParseException e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public static boolean isEndDateAfterStartDate(String startDate, String endDate) {&#10;        if (!isValidDate(startDate) || !isValidDate(endDate)) return false;&#10;        SimpleDateFormat sdf = new SimpleDateFormat(PATTERN, Locale.US);&#10;        sdf.setLenient(false);&#10;        try {&#10;            Date start = sdf.parse(startDate.trim());&#10;            Date end = sdf.parse(endDate.trim());&#10;            return end.after(start);&#10;        } catch (ParseException e) {&#10;            return false;&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.vacationscheduler.util;&#10;&#10;import java.text.ParseException;&#10;import java.text.SimpleDateFormat;&#10;import java.util.Date;&#10;import java.util.Locale;&#10;&#10;public final class DateValidator {&#10;    private static final String PATTERN = &quot;MM/dd/yyyy&quot;;&#10;&#10;    private DateValidator() {}&#10;&#10;    public static boolean isValidDate(String date) {&#10;        if (date == null || date.trim().isEmpty()) return false;&#10;        SimpleDateFormat sdf = new SimpleDateFormat(PATTERN, Locale.US);&#10;        sdf.setLenient(false);&#10;        try {&#10;            sdf.parse(date.trim());&#10;            return true;&#10;        } catch (ParseException e) {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    public static boolean isEndDateAfterStartDate(String startDate, String endDate) {&#10;        if (!isValidDate(startDate) || !isValidDate(endDate)) return false;&#10;        SimpleDateFormat sdf = new SimpleDateFormat(PATTERN, Locale.US);&#10;        sdf.setLenient(false);&#10;        try {&#10;            Date start = sdf.parse(startDate.trim());&#10;            Date end = sdf.parse(endDate.trim());&#10;            return end.after(start);&#10;        } catch (ParseException e) {&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>